[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "arrakis"
authors = [
    {name="Alec Thomson"},
    {name="Tim Galvin"},
]
description = "Processing the SPICE."
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.9"
classifiers=[
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Development Status :: 3 - Alpha",
]
dynamic = ["version"]

dependencies = [
    "astropy>=5",
    "bilby",
    "ConfigArgParse",
    "dask[dataframe]",
    "distributed @ git+https://github.com/AlecThomson/distributed@drainclose",
    "dask_jobqueue",
    "dask_mpi",
    "FRion>=1.1.5",
    "h5py",
    "matplotlib>=3.8",
    "numba",
    "numba_progress",
    "pandas>=2",
    "psutil",
    "pymongo",
    "pymultinest",
    "python_casacore",
    "RACS-tools>=4.1.2",
    "radio_beam",
    "RMextract>=0.5.1",
    "schwimmbad",
    "scipy",
    "spectral_cube>=0.6.3",
    "spython",
    "tqdm",
    "vorbin",
    "graphviz",
    "bokeh",
    "prefect[dask]>=2,<3",
    "RMTable>=1.2.1",
    "RM-Tools>=1.4.2",
    "PolSpectra>=1.1.0",
    "setuptools",
    "fixms>=0.3.3",
    "fitscube>=0.5.4",
    "psycopg2-binary",
    "sqlalchemy",
    "scikit-image>=0.23",
]

[project.urls]
homepage = "https://research.csiro.au/racs/"
repository = "https://github.com/AlecThomson/arrakis"
documentation = "https://arrakis.readthedocs.io/en/latest/"


[project.optional-dependencies]
dev = [
    "ruff",
    "ipython",
    "pytest",
    "pytest-cov",
    "pre-commit",
]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
    "sphinx-book-theme",
    "sphinx-autoapi",
    "m2r2",
    "numpydoc",
    "sphinxcontrib-mermaid",
]


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "arrakis/_version.py"
metadata.allow-direct-references = true


[project.scripts]
spice_init = "arrakis.init_database:cli"
spice_process = "arrakis.process_spice:cli"
spice_region = "arrakis.process_region:cli"
spice_cat = "arrakis.makecat:cli"
spice_image = "arrakis.imager:cli"

# Misc scripts # TODO work in with hatch
# casda_prepare = { reference="scripts/casda_prepare.py", type="file"}
# check_cutout = { reference="scripts/check_cutout.py", type="file"}
# compare_leakage = { reference="scripts/compare_leakage.py", type="file"}
# compute_leakage = { reference="scripts/compute_leakage.py", type="file"}
# copy_cutouts_askap = { reference="scripts/copy_cutouts_askap.py", type="file"}
# copy_cutouts = { reference="scripts/copy_cutouts.py", type="file"}
# copy_data = { reference="scripts/copy_data.py", type="file"}
# find_row = { reference="scripts/find_row.py", type="file"}
# find_sbid = { reference="scripts/find_sbid.py", type="file"}
# fix_dr1_cat = { reference="scripts/fix_dr1_cat.py", type="file"}
# fix_src_cat = { reference="scripts/fix_src_cat.py", type="file"}
# hello_mpi_world = { reference="scripts/hello_mpi_world.py", type="file"}
# make_links = { reference="scripts/make_links.py", type="file"}
# spica = { reference="scripts/spica.py", type="file"}
# tar_cubelets = { reference="scripts/tar_cubelets.py", type="file"}
# create_mongodb = { reference="scripts/create_mongodb.py", type="file"}

[tool.ruff]
src = ["arrakis", "tests"]

[tool.ruff.lint]
extend-select = [
    # "B",   # flake8-bugbear
    "I",   # isort
    "ARG", # flake8-unused-arguments
    # "C4",  # flake8-comprehensions
    # "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    # "G",   # flake8-logging-format
    # "PGH", # pygrep-hooks
    # "PIE", # flake8-pie
    # "PL",  # pylint
    # "PT",  # flake8-pytest-style
    # "PTH", # flake8-use-pathlib
    # "RET", # flake8-return
    # "RUF", # Ruff-specific
    # "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP",  # pyupgrade
    # "YTT", # flake8-2020
    # "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    # "PD",  # pandas-vet,
    # "RET", # flake8-return
]
ignore = [
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "ISC001",  # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]
